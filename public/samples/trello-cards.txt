API:
    https://api.trello.com/1/boards/ce5oDD24/cards?key=d5e133da1db19c2435d2228f8d8f32ca&token=14a745f5254e1f2374f0e72ca212f4211aedefb7e21228b978b03e2035f1dfee

Username:

Password:


API Method:

  backToDev:
    function(apiResult, lastRecord) {
      var devDoneCards = apiResult.filter(function(result) {
        return result.labels.filter(function(label){return label.name == 'Dev Complete'}).length > 0;
      }).map(function(card) { return {id: card.id, name: card.name};});

      var backToDev = 0;
      if(!lastRecord) {
        return {
          metricValue: 0,
          devDoneCards: devDoneCards
        }
      }

      var lastDevDoneCards = lastRecord.devDoneCards;

      var backToDevCards = lastDevDoneCards.filter(function(lastCard) {
        return devDoneCards.filter(function(card) {
          return card.id == lastCard.id;
        }).length == 0;
      });

      if(backToDevCards.length == 0) {
        return null;
      }

      var results = backToDevCards.map(function(card) {
        return {
          metricValue: 1,
          cardName: card.name
        };
      });
      results[results.length - 1].devDoneCards = devDoneCards;

      return results;
    }

  cardsNumber:
     function(apiResult, lastRecord) {
         var plannedCards = 0,
           devCompleteCards = 0,
           qaDoneCards = 0,
           completeCards = 0;
         var result = [];

         var totalCards = apiResult.length;
         apiResult.forEach(function (results) {
             results.labels.forEach(function (label) {
                 switch (label.name) {
                     case 'Planned':
                         plannedCards++;
                         break;
                     case 'Dev Complete':
                         devCompleteCards++;
                         break;
                     case 'QA\'ed':
                         qaDoneCards++;
                         break;
                     case 'Completed':
                         completeCards++;
                         break;
                 }
             })
         });

         function calculateResult() {
             var lastCardsNumber = lastRecord.currentCards;
             currentCards.forEach(function (currentCards) {
                 lastCardsNumber.forEach(function (lastCards) {
                     if (lastCards.metricType == currentCards.metricType && currentCards.metricValue > lastCards.metricValue) {
                         result.push({
                             metricType: currentCards.metricType,
                             metricValue: currentCards.metricValue - lastCards.metricValue
                         });
                     }
                 })
             });
         }

         var currentCards = [{metricType: 'Planned', metricValue: plannedCards},
             {metricType: 'Dev Complete', metricValue: devCompleteCards},
             {metricType: 'QA\'ed', metricValue: qaDoneCards},
             {metricType: 'Completed', metricValue: completeCards},
             {metricType: 'All', metricValue: totalCards}];

         lastRecord ? calculateResult() : result = currentCards;
         if (result.length == 0) {
             return null;
         }
         result[result.length - 1].currentCards = currentCards;
         return result;
     }







